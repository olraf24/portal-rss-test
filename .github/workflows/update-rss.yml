// Zastąp obie funkcje enhanceTitleWithGroq i enhanceDescriptionWithGroq tą jedną:

async function enhanceTitleAndDescriptionWithGroq(originalTitle, originalDescription) {
  const prompt = `ZADANIE: Przepisz tytuł i opis artykułu informacyjnego.

WYMAGANIA DLA TYTUŁU:
- Usuń clickbaitowe elementy
- Zachowaj wszystkie fakty
- Napisz w stylu informacyjnym, nie sensacyjnym  
- Bez cudzysłowów i wykrzykników
- Maksymalnie 80 znaków
- Precyzyjny i merytoryczny ton

WYMAGANIA DLA OPISU:
- Przekształć w listę punktową
- Wypunktuj WSZYSTKIE informacje z opisu
- KAŻDY PUNKT W OSOBNEJ LINII
- Zacznij każdy punkt od: •
- Zachowaj wszystkie szczegóły (liczby, miejsca, osoby)
- NIE DUPLIKUJ informacji z tytułu
- Nie dodawaj własnych komentarzy

ORYGINALNY TYTUŁ:
${originalTitle}

ORYGINALNY OPIS:
${originalDescription}

ODPOWIEDŹ W FORMACIE JSON:
{
  "title": "przepisany neutralny tytuł",
  "description": "• Pierwszy punkt\\n• Drugi punkt\\n• Trzeci punkt"
}

WAŻNE: Odpowiedz TYLKO kodem JSON, bez żadnych innych tekstów!`;

  const requestData = JSON.stringify({
    messages: [
      {
        role: "system",
        content: "Jesteś redaktorem prasowym specjalizującym się w pisaniu neutralnych, informacyjnych tytułów i strukturyzowaniu informacji w listy punktowe. Zawsze odpowiadasz tylko kodem JSON."
      },
      {
        role: "user",
        content: prompt
      }
    ],
    model: "llama-3.3-70b-versatile",
    temperature: 0.2,
    max_tokens: 600,
    top_p: 0.9
  });

  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.groq.com',
      path: '/openai/v1/chat/completions',
      method: 'POST',
      headers: {
        'Authorization': 'Bearer ' + GROQ_API_KEY,
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(requestData)
      },
      timeout: 15000
    };

    const req = https.request(options, (res) => {
      // DODAJ: Sprawdzenie rate limit headers
      console.log('=== GROQ RATE LIMIT INFO ===');
      console.log('Status:', res.statusCode);
      console.log('TPM remaining:', res.headers['x-ratelimit-remaining-tokens']);
      console.log('RPM remaining:', res.headers['x-ratelimit-remaining-requests']);
      
      if (res.statusCode === 429) {
        const retryAfter = res.headers['retry-after'];
        console.log('🚨 RATE LIMIT EXCEEDED! Retry after:', retryAfter, 'seconds');
        resolve({
          title: originalTitle,
          description: originalDescription
        });
        return;
      }

      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          if (res.statusCode !== 200) {
            console.log('Groq API error for combined processing:', res.statusCode);
            resolve({
              title: originalTitle,
              description: originalDescription
            });
            return;
          }
          
          const response = JSON.parse(data);
          let enhancedText = response.choices[0].message.content.trim();
          
          // Usuń ewentualne markdown backticks
          enhancedText = enhancedText.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
          
          // Parsuj JSON odpowiedź
          const enhancedData = JSON.parse(enhancedText);
          
          console.log('Enhanced title:', enhancedData.title);
          console.log('Enhanced description:', enhancedData.description.substring(0, 100) + '...');
          
          // Sprawdź czy się zmieniło
          const titleChanged = enhancedData.title !== originalTitle;
          const descChanged = enhancedData.description !== originalDescription;
          
          console.log(`Title changed: ${titleChanged ? 'YES' : 'NO'}`);
          console.log(`Description changed: ${descChanged ? 'YES' : 'NO'}`);
          
          resolve({
            title: enhancedData.title || originalTitle,
            description: enhancedData.description || originalDescription
          });
          
        } catch (error) {
          console.log('Combined processing error:', error);
          resolve({
            title: originalTitle,
            description: originalDescription
          });
        }
      });
    });

    req.on('error', () => resolve({
      title: originalTitle,
      description: originalDescription
    }));
    
    req.on('timeout', () => {
      req.destroy();
      resolve({
        title: originalTitle,
        description: originalDescription
      });
    });

    req.setTimeout(15000);
    req.write(requestData);
    req.end();
  });
}

// ZMIEŃ główną pętlę w main():
for (let i = 0; i < articles.length; i++) {
  const article = articles[i];
  
  if (article.description && article.description !== 'Brak opisu') {
    console.log(`\n=== PRZETWARZANIE ${i + 1}/${articles.length} ===`);
    console.log(`Oryginalny tytuł: ${article.title}`);
    console.log(`Oryginalny opis: ${article.description.substring(0, 100)}...`);
    
    // JEDEN REQUEST zamiast dwóch
    const enhanced = await enhanceTitleAndDescriptionWithGroq(
      article.title,
      article.description
    );
    
    articles[i].originalTitle = article.title;
    articles[i].originalDescription = article.description;
    articles[i].title = enhanced.title;
    articles[i].description = enhanced.description;
    
    // Opóźnienie między artykułami (teraz tylko jedno!)
    if (i < articles.length - 1) {
      console.log('Czekam 3 sekundy...');
      await delay(3000); // Można zmniejszyć bo mniej requestów
    }
  } else {
    console.log(`Pomijam artykuł ${i + 1} - brak opisu`);
  }
}
