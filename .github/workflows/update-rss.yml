name: Update RSS Feed

on:
  schedule:
    - cron: '*/3 * * * *'  # Co 3 minuty
  push:
    branches: [ main ]
  workflow_dispatch:  # Umożliwia manualne uruchomienie

permissions:
  contents: write  # Niezbędne do commitowania zmian

jobs:
  update-rss:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Fetch and parse RSS
      run: |
        cat > fetch-rss.js << 'EOF'
        const https = require('https');
        const fs = require('fs');
        
        const RSS_URL = 'https://www.tvn24.pl/najnowsze.xml';
        
        function fetchRSS() {
          return new Promise((resolve, reject) => {
            https.get(RSS_URL, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => resolve(data));
            }).on('error', reject);
          });
        }
        
        function parseRSS(xml) {
          console.log('Długość pobranego XML:', xml.length);
          console.log('Pierwsze 500 znaków:', xml.substring(0, 500));
          
          const items = [];
          
          // Najprostszy możliwy split - dzielimy na <item>
          const itemParts = xml.split('<item>');
          console.log('Znaleziono części item:', itemParts.length - 1);
          
          for (let i = 1; i < itemParts.length; i++) {
            const item = itemParts[i].split('</item>')[0];
            
            // Bardzo prosty regex bez skomplikowanych grup
            let title = '';
            let link = '';
            let pubDate = '';
            let description = '';
            
            // Tytuł
            const titleMatch = item.match(/<title><!\[CDATA\[(.*?)\]\]><\/title>/);
            if (titleMatch) title = titleMatch[1];
            
            // Link
            const linkMatch = item.match(/<link>(.*?)<\/link>/);
            if (linkMatch) link = linkMatch[1];
            
            // Data
            const dateMatch = item.match(/<pubDate>(.*?)<\/pubDate>/);
            if (dateMatch) pubDate = dateMatch[1];
            
            // Opis
            const descMatch = item.match(/<description><!\[CDATA\[(.*?)\]\]><\/description>/);
            if (descMatch) {
              description = descMatch[1].replace(/<[^>]*>/g, '').trim();
              if (description.length > 200) description = description.substring(0, 200) + '...';
            }
            
            if (title && link) {
              items.push({
                title: title.trim(),
                link: link.trim(),
                pubDate: pubDate.trim(),
                description: description || 'Brak opisu'
              });
              
              console.log(`Znaleziono artykuł: ${title.substring(0, 50)}...`);
            }
            
            if (items.length >= 20) break;
          }
          
          return items;
        }
        
        async function main() {
          try {
            console.log('Pobieranie RSS...');
            const xml = await fetchRSS();
            const articles = parseRSS(xml);
            
            const data = {
              lastUpdate: new Date().toISOString(),
              articles: articles
            };
            
            fs.writeFileSync('news.json', JSON.stringify(data, null, 2));
            console.log(`Pobrano ${articles.length} artykułów`);
            
            if (articles.length > 0) {
              console.log('Pierwszy artykuł:', articles[0].title);
            }
          } catch (error) {
            console.error('Błąd:', error);
            process.exit(1);
          }
        }
        
        main();
        EOF
        
        node fetch-rss.js
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add news.json
        if git diff --staged --quiet; then
          echo "Brak zmian"
        else
          git commit -m "Aktualizacja RSS $(date)"
          git push
        fi
