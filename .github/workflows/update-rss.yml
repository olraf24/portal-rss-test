// Ulepszona funkcja do wywołania Groq API
        async function enhanceDescriptionWithGroq(title, originalDescription) {
          const prompt = "ZADANIE: Przekształć ten opis artykułu w listę punktową wszystkich informacji.\n\n" + "WYMAGANIA:\n" + "- Wypunktuj WSZYSTKIE informacje z opisu\n" + "- Każdy punkt w nowej linii z • na początku\n" + "- Zachowaj wszystkie szczegóły (liczby, miejsca, osoby)\n" + "- Nie skracaj ani nie pomijaj żadnych danych\n" + "- NIE DUPLIKUJ informacji z tytułu w punktach\n" + "- Nie dodawaj własnych komentarzy\n" + "- Tylko faktyczne informacje z tekstu opisu\n\n" + "Opis artykułu: " + originalDescription + "\n\n" + "LISTA PUNKTOWA:";
        
          const requestData = JSON.stringify({
            messages: [
              {
                role: "system",
                content: "Jesteś ekspertem od strukturyzowania informacji. Zawsze przekształcasz tekst w przejrzystą listę punktową zachowując wszystkie szczegóły."
              },
              {
                role: "user",
                content: prompt
              }
            ],
            model: "llama-3.3-70b-versatile",
            temperature: 0.2,
            max_tokens: 500,
            top_p: 0.9
          });
        
          return new Promise((resolve, reject) => {
            const options = {
              hostname: 'api.groq.com',
              path: '/openai/v1/chat/completions',
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${GROQ_API_KEY}`,
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(requestData)
              },
              timeout: 15000
            };
        
            const req = https.request(options, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                try {
                  if (res.statusCode !== 200) {
                    console.log(`Groq API error ${res.statusCode}:`, data);
                    resolve(originalDescription); // Fallback do oryginalnego
                    return;
                  }
                  
                  const response = JSON.parse(data);
                  let enhancedText = response.choices[0].message.content.trim();
                  
                  // Usuń ewentualne cudzysłowy na początku/końcu
                  enhancedText = enhancedText.replace(/^["']|["']$/g, '');
                  
                  // NOWA CZĘŚĆ: Przekształć kropki • na paragrafy HTML
                  const parts = enhancedText.split('•').filter(part => part.trim().length > 0);
                  
                  let formattedText;
                  if (parts.length <= 1) {
                    // Jeśli nie ma kropek, zwróć normalny paragraf
                    formattedText = `<p>${enhancedText}</p>`;
                  } else {
                    // Przekształć każdą część na osobny paragraf
                    formattedText = parts.map(part => `<p>• ${part.trim()}</p>`).join('');
                  }
                  
                  // Sprawdź czy tekst się różni od oryginału (porównaj bez HTML)
                  const textOnly = formattedText.replace(/<[^>]*>/g, '');
                  const similarity = calculateSimilarity(originalDescription, textOnly);
                  
                  if (similarity > 0.8) {
                    console.log(`Tekst zbyt podobny (${Math.round(similarity * 100)}%), pozostawiam oryginalny...`);
                    resolve(`<p>${originalDescription}</p>`); // Również w paragrafie
                  } else {
                    console.log(`Enhanced (${Math.round(similarity * 100)}% podobieństwo): ${textOnly.substring(0, 50)}...`);
                    resolve(formattedText);
                  }
                } catch (error) {
                  console.log('JSON parse error:', error);
                  resolve(`<p>${originalDescription}</p>`); // Fallback z paragrafem
                }
              });
            });
        
            req.on('error', (error) => {
              console.log('Groq request error:', error);
              resolve(`<p>${originalDescription}</p>`); // Fallback z paragrafem
            });
        
            req.on('timeout', () => {
              console.log('Groq request timeout');
              req.destroy();
              resolve(`<p>${originalDescription}</p>`); // Fallback z paragrafem
            });
        
            req.setTimeout(15000);
            req.write(requestData);
            req.end();
          });
        }
