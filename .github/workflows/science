name: Update Science RSS Feed

on:
  schedule:
    - cron: '10,20,30,40,50,0 * * * *'  # Co 10 minut, z przesunięciem o 10 min
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-science-rss:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Fetch Science RSS
      run: |
        cat > fetch-science.js << 'EOF'
        const https = require('https');
        const fs = require('fs');
        
        const RSS_URL = 'https://dzienniknaukowy.pl/feed';
        
        function fetchRSS() {
          return new Promise((resolve, reject) => {
            const options = {
              hostname: 'dzienniknaukowy.pl',
              path: '/feed',
              method: 'GET',
              headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/rss+xml, application/xml, text/xml',
                'Accept-Language': 'pl-PL,pl;q=0.9,en;q=0.8',
                'Cache-Control': 'no-cache'
              },
              timeout: 10000
            };
            
            const req = https.request(options, (res) => {
              if (res.statusCode === 301 || res.statusCode === 302) {
                const location = res.headers.location;
                if (location) {
                  const url = new URL(location);
                  const newOptions = {
                    hostname: url.hostname,
                    path: url.pathname + url.search,
                    method: 'GET',
                    headers: options.headers,
                    timeout: 10000
                  };
                  
                  const redirectReq = https.request(newOptions, (redirectRes) => {
                    if (redirectRes.statusCode !== 200) {
                      reject(new Error(`HTTP ${redirectRes.statusCode}`));
                      return;
                    }
                    
                    let data = '';
                    redirectRes.on('data', chunk => data += chunk);
                    redirectRes.on('end', () => resolve(data));
                  });
                  
                  redirectReq.on('error', reject);
                  redirectReq.setTimeout(10000);
                  redirectReq.end();
                  return;
                }
              }
              
              if (res.statusCode !== 200) {
                reject(new Error(`HTTP ${res.statusCode}`));
                return;
              }
              
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => resolve(data));
            });
            
            req.on('error', reject);
            req.on('timeout', () => {
              req.destroy();
              reject(new Error('Request timeout'));
            });
            
            req.setTimeout(10000);
            req.end();
          });
        }
        
        function parseRSS(xml) {
          const items = [];
          const itemParts = xml.split('<item>');
          
          for (let i = 1; i < itemParts.length; i++) {
            const item = itemParts[i].split('</item>')[0];
            
            let title = '';
            let link = '';
            let pubDate = '';
            let description = '';
            
            // Parsowanie tytułu
            const titleMatch = item.match(/<title><!\[CDATA\[(.*?)\]\]><\/title>/) || 
                              item.match(/<title>(.*?)<\/title>/);
            if (titleMatch) title = titleMatch[1];
            
            // Parsowanie linku
            const linkMatch = item.match(/<link>(.*?)<\/link>/);
            if (linkMatch) link = linkMatch[1];
            
            // Parsowanie daty
            const dateMatch = item.match(/<pubDate>(.*?)<\/pubDate>/);
            if (dateMatch) pubDate = dateMatch[1];
            
            // Parsowanie opisu
            const descMatch = item.match(/<description>\s*<!\[CDATA\[([\s\S]*?)\]\]>\s*<\/description>/) ||
                             item.match(/<description>([\s\S]*?)<\/description>/);
            if (descMatch) {
              let rawDesc = descMatch[1];
              description = rawDesc.replace(/<[^>]*>/g, '').trim();
              description = description.replace(/\s+/g, ' ').trim();
            }
            
            if (title && link) {
              items.push({
                title: title.trim(),
                link: link.trim(),
                pubDate: pubDate.trim(),
                description: description || 'Brak opisu'
              });
            }
            
            if (items.length >= 15) break; // Zwiększamy limit dla większej ilości artykułów
          }
          
          return items;
        }
        
        async function main() {
          try {
            console.log('Pobieranie RSS Dziennik Naukowy...');
            const xml = await fetchRSS();
            const articles = parseRSS(xml);
            
            console.log(`Pobrano ${articles.length} artykułów naukowych`);
            
            const data = {
              lastUpdate: new Date().toISOString(),
              enhancedWithGroq: false,
              source: 'DziennikNaukowy.pl',
              articles: articles
            };
            
            fs.writeFileSync('science.json', JSON.stringify(data, null, 2));
            console.log(`ZAPISANO ${articles.length} artykułów naukowych`);
            
          } catch (error) {
            console.error('BŁĄD:', error);
            
            const fallbackData = {
              lastUpdate: new Date().toISOString(),
              enhancedWithGroq: false,
              error: error.message,
              source: 'DziennikNaukowy.pl',
              articles: []
            };
            
            fs.writeFileSync('science.json', JSON.stringify(fallbackData, null, 2));
            process.exit(1);
          }
        }
        
        main();
        EOF
        
        node fetch-science.js
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git config --local user.name "GitHub Action"
        git add science.json
        if git diff --staged --quiet; then
          echo "Brak zmian w science.json"
        else
          git commit -m "Aktualizacja RSS nauki $(date)"
          git push
        fi
